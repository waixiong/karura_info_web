{"version":3,"sources":["dex/model.ts","dex/config.ts","config.ts","dex/data.ts","utils.ts","dex/liquidity.calculation.ts","block/block.service.ts","dex/dex.query.ts","theme.js","dex/dex.state.tsx","app.component.js","block/block.query.ts","App.js","reportWebVitals.js","index.js"],"names":["Block","id","timestamp","number","this","args","Date","parse","SwapEvent","blockNumber","block","currency","amount","startAmount","endAmount","BigInt","obj","swappingToken","result","fromJson","data","length","JSON","c","push","token","swappingAmount","a","PoolData","pair","rawSwaps","volumeNative","volumeUSD","liquidityNative","liquidityUSD","date","lastBlockNumber","split","RawSwapAction","raw","fromCurrency","fromAmount","toCurrency","toAmount","LiquidityPoolData","data24h","dataByDays","NATIVE","liquidtyConfig","SubqueryUrl","querySwapFromBlock","fromBlock","toBlock","request","gql","undefined","nodes","events","swapEvents","startOfDay","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","endOfDay","computeLiquidityPoolData","swaps","pool24h","categorizeSwapEventsToPool","setHours","getHours","index","i","getTime","slice","filterRawSwapEventOnLast24h","forEach","pool","calculatePoolVolume","swapsByDay","separateRawSwapEventByDay","pool7d","Map","has","set","get","liquidityData","transformRawSwapAction","skip","swap","rawSwap","swapsWithDays","endOfToday","pop","poolMap","_","toUTCString","token0","token1","nativeTraded","Number","lastBlockFromSubquery","blocks","state","dispatch","lastBlock","rawSwapActions","console","log","loaded7d","querySwapData","query24hSwapData","fromBlockEstimate","untilBlock","queryUntil7dSwapData","continueBlock","setUTCDate","getUTCDate","millisecondsDifferent","theme","createTheme","palette","type","primary","light","main","dark","contrastText","secondary","DexStateContext","createContext","DexStateProvider","children","value","useState","Provider","useDexState","context","useContext","Error","useStyles","makeStyles","displayContent","display","flexDirection","margin","spacing","width","height","paperCard","syncTitle","smallTitle","fontSize","smallValue","LastBlockSync","classes","useQuery","cacheTime","staleTime","isLoading","error","querySwapUpdate","message","className","LiquidityDataComponent","List","map","LiquidityPoolDataCard","props","setValue","setDate","Paper","elevation","Grid","container","item","xs","Box","p","pt","pl","pb","toFixed","BarChart","top","right","left","bottom","onMouseLeave","Tooltip","cursor","fill","contentStyle","formatter","name","payload","dayjs","format","Bar","dataKey","queryClient","QueryClient","appBar","flexGrow","position","menuButton","marginRight","title","topRight","alignContent","App","ThemeProvider","QueryClientProvider","client","CustomAppBar","AppBar","Toolbar","Typography","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8b895e8.chunk.js","sourcesContent":["// import BN from 'bn.js';\n\nexport interface RawEvent { \n    id: string; \n    method: string; \n    data: any[];\n    blockNumber: number; \n    block: any;\n}\n\n// TODO: use gentype from acala\nexport class Block {\n    id: string;\n    timestamp: number;\n    number: number;\n\n    constructor(\n        id?: string,\n        timestamp?: number,\n        number?: number\n    ) {\n        this.id = id || '';\n        this.timestamp = timestamp || 0;\n        this.number = number || 0;\n    }\n\n    public static fromJson(args: { id: string, timestamp: string, number: number }) {\n        let result: Block = new Block(\n            args.id,\n            Date.parse(args.timestamp+'Z'),\n            args.number,\n        );\n        return result;\n    }\n}\n\n// TODO: use gentype from acala\nexport class SwapEvent {\n    id: string | undefined;\n    blockNumber: number | undefined;\n    block: Block | undefined;\n    // data\n    currency: string[];\n    amount: bigint[];\n    startAmount: bigint;\n    endAmount: bigint;\n\n    constructor() {\n        this.id = '';\n        this.blockNumber = 0;\n        this.currency = [];\n        this.amount = [];\n        this.startAmount = BigInt(0);\n        this.endAmount = BigInt(0);\n    }\n\n    public static fromJson(obj: RawEvent) {\n        let result: SwapEvent = new SwapEvent();\n        result.id = obj.id;\n        result.blockNumber = obj.blockNumber;\n        result.block = Block.fromJson(obj.block as { id: string, timestamp: string, number: number });\n        var swappingToken: { token: string }[]\n        if (obj.data.length === 4) {\n            // old structure: Swap(T::AccountId, Vec<CurrencyId>, Balance, Balance)\n            swappingToken = JSON.parse(obj['data'][1]['value']);\n            result.currency = [];\n            for (var c of swappingToken) {\n                result.currency.push(c.token);\n            }\n            result.startAmount = BigInt(obj['data'][2]['value']);\n            result.endAmount = BigInt(obj['data'][3]['value']);\n            result.amount = [ result.startAmount, result.endAmount ];\n        } else {\n            // new structure: Swap(T::AccountId, Vec<CurrencyId>, Vec<Balance>)\n            // from commit 5afdb835eede2e0f417dff561167c26e81ddb571 @ AcalaNetwork/Acala \n            swappingToken = JSON.parse(obj['data'][1]['value']);\n            result.currency = [];\n            for (var c of swappingToken) {\n                result.currency.push(c.token);\n            }\n            result.amount = [];\n            var swappingAmount: any[] = JSON.parse(obj['data'][2]['value']);\n            for (var a of swappingAmount) {\n                result.amount.push(a);\n            }\n            // TODO: validate whether this is needed\n            result.startAmount = result.amount[0];\n            result.endAmount = result.amount[result.amount.length - 1];\n        }\n        return result;\n    }\n}\n\nexport class PoolData {\n    pair: string; // in format of `{token0}-{token1}`\n    rawSwaps: RawSwapAction[];\n    volumeNative: number = 0;\n    volumeUSD: number = 0;\n\n    liquidityNative: number = 0;\n    liquidityUSD: number = 0;\n    \n    date: string;\n    lastBlockNumber: number;\n\n    constructor(\n        pair: string,\n        rawSwaps: RawSwapAction[] = [],\n    ) {\n        this.pair = pair;\n        this.rawSwaps = rawSwaps;\n\n        this.date = '';\n        this.lastBlockNumber = 0;\n    }\n\n    get token0(): string {\n        return this.pair.split('-')[0];\n    }\n\n    get token1(): string {\n        return this.pair.split('-')[1];\n    }\n}\n\n// Raw data from SwapEvent with clear from which currency to which currency\nexport class RawSwapAction {\n    id: string; // SwapEvent id\n    blockNumber: number; // SwapEvent blockNumber\n    block: Block; // SwapEvent Block\n    // data\n    fromCurrency: string;\n    fromAmount: bigint;\n    toCurrency: string;\n    toAmount: bigint;\n    // // amount data\n    // ksmValue: number;\n    // usdValue: number;\n\n    constructor(raw: {\n        id: string,\n        blockNumber: number,\n        block: Block,\n        fromCurrency: string,\n        fromAmount: bigint,\n        toCurrency: string,\n        toAmount: bigint,\n    }) {\n        this.id = raw.id;\n        this.blockNumber = raw.blockNumber;\n        this.block = raw.block;\n        this.fromAmount = raw.fromAmount;\n        this.fromCurrency = raw.fromCurrency;\n        this.toAmount = raw.toAmount;\n        this.toCurrency = raw.toCurrency;\n    }\n}\n\nexport class LiquidityPoolData {\n    pair: string;\n    data24h: PoolData;\n    dataByDays: PoolData[];\n\n    constructor(\n        pair: string,\n        data24h: PoolData,\n        dataByDays: PoolData[],\n    ) {\n        this.pair = pair;\n        this.data24h = data24h;\n        this.dataByDays = dataByDays;\n    }\n}","export const NATIVE = \"KSM\";\n\nexport var liquidtyConfig: any = {\n    \"KAR\": {\n        \"KSM\": \"KAR-KSM\",\n    },\n    \"KUSD\": {\n        \"KSM\": \"KUSD-KSM\",\n    },\n    \"KSM\": {\n        \"KAR\": \"KAR-KSM\",\n        \"KUSD\": \"KUSD-KSM\",\n    }\n}","// https://api.polkawallet.io/acala-subql\n// https://api.subquery.network/sq/AcalaNetwork/karura\nexport const SubqueryUrl = 'https://api.polkawallet.io/acala-subql';","import { request, gql } from \"graphql-request\";\nimport { SwapEvent } from \"./model\";\nimport { ApiPromise } from '@polkadot/api';\nimport { AnyNumber } from '@polkadot/types/types';\nimport { liquidtyConfig, NATIVE } from './config';\nimport { SubqueryUrl } from '../config';\n\n// query with graphql format on subql-node\n// node: https://api.subquery.network/sq/AcalaNetwork/karura\n// node: https://api.polkawallet.io/karura-subql\n\n/// default as KAR KSM\nexport async function historyRateFromLiquidity(\n    blockNumber: AnyNumber, \n    karuraApi: ApiPromise, \n    token0: string = 'KAR',\n    token1: string = 'KSM'\n) : Promise<bigint> {\n    const pair: string = liquidtyConfig[token0][token1];\n    var tokens = pair.split('-');\n    const blockHash = await karuraApi.rpc.chain.getBlockHash(blockNumber);\n    const liquidityKAR = await karuraApi.query.dex.liquidityPool.at(blockHash, [\n        { Token: tokens[0] },\n        { Token: tokens[1] },\n    ]);\n    /*\n        for block 240000\n        [\"0x000000000000000005d4a5a29ff1d21b\",\"0x0000000000000000002b508bdb92205f\"]\n        [ '420.1427 kKAR', '12.1919 kKAR' ]\n    */\n    var token0Balance = BigInt((liquidityKAR as any)[0].toString());\n    var token1Balance = BigInt((liquidityKAR as any)[1].toString());\n\n    // rate of token0 : token1\n    // how many token0 equal to a token1\n    // var _rate = token0Balance.mul(new BN('1000000000000000000')).div(token1Balance);\n    // var rate = _rate.toNumber() / 1000000000000\n    \n    if (token0 === tokens[0]) {\n        return token0Balance * BigInt('1000000000000000000') / (token1Balance);\n    }\n    return token1Balance * BigInt('1000000000000000000') / (token0Balance);\n}\n\n/// price of native relay chain\n/// available only after block 276231 for karura KSM\nexport async function historyNativePrice(blockNumber: AnyNumber, karuraApi: ApiPromise) : Promise<bigint> {\n    const blockHash = await karuraApi.rpc.chain.getBlockHash(blockNumber);\n    const nativeValueTimestamp = await karuraApi.query.acalaOracle.values.at(blockHash, { Token: NATIVE });\n    /*{\n        value: '297,940,000,000,000,000,000',\n        timestamp: '1,629,213,594,519'\n      }*/\n    // // old method\n    // var json: { value: string, timestamp: string } = JSON.parse(JSON.stringify(nativeValueTimestamp.toHuman()));\n    // var priceInBN = new BN(json.value.replace(RegExp(/,/g), ''));\n    // console.log(json.value.replace(RegExp(/,/g), ''));\n    // console.log(priceInBN.toString());\n    // console.log(priceInBN.toString(16));\n    \n    var json: { value: any, timestamp: any } = JSON.parse(nativeValueTimestamp.toString());\n    var priceInBN = BigInt(json.value);\n    return priceInBN;\n}\n\n// this will be limited on 100 events, if u know the event u wan from block, can use querySwapFromBlock\nexport async function querySwap(\n    count: number, \n    offset: number = 0,\n) : Promise<SwapEvent[]> {\n    const {\n        events: {\n            nodes\n        }\n    } = await request(\n        SubqueryUrl,\n        gql`\n            query {\n                events (\n                    first: ${count}\n                    offset: ${offset}\n                    orderBy: BLOCK_NUMBER_DESC\n                    filter: {\n                        method: { equalTo: \"Swap\" }\n                    }\n                ) {\n                    nodes {\n                        id\n                        method\n                        data\n                        blockNumber\n                        block {\n                            id\n                            timestamp\n                            number\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    var swapEvents: SwapEvent[] = [];\n    for (var obj of nodes) {\n        swapEvents.push(SwapEvent.fromJson(obj));\n    }\n    \n    return swapEvents;\n}\n\n// fromBlock not included\n// toBlock included\nexport async function querySwapFromBlock(\n    fromBlock: number,\n    toBlock?: number | undefined,\n) : Promise<SwapEvent[]> {\n    const {\n        events: {\n            nodes\n        }\n    } = await request(\n        SubqueryUrl,\n        gql`\n            query {\n                events (\n                    orderBy: BLOCK_NUMBER_DESC\n                    filter: {\n                        method: { equalTo: \"Swap\" }\n                        blockNumber: { \n                            greaterThan: \"${fromBlock}\"\n                            ${ toBlock !== undefined? `lessThanOrEqualTo: \"${toBlock}\"` : `` }\n                        }\n                    }\n                ) {\n                    nodes {\n                        id\n                        method\n                        data\n                        blockNumber\n                        block {\n                            id\n                            timestamp\n                            number\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    var swapEvents: SwapEvent[] = [];\n    for (var obj of nodes) {\n        swapEvents.push(SwapEvent.fromJson(obj));\n    }\n    \n    return swapEvents;\n}\n","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n    options\n} from \"@acala-network/api\";\nimport BN from 'bn.js';\nimport * as fetch from \"node-fetch\";\n\nexport function quantityToNumber(bn: BN): number {\n    return bn.toNumber() / 1000000000000;\n}\n\nexport function priceToNumber(bn: BN): number {\n    return bn.div(new BN(1000000000000)).toNumber() / 1000000;\n}\n\n// // query with graphql format on subql-node\n// // node: https://api.subquery.network/sq/AcalaNetwork/karura\n// // node: https://api.polkawallet.io/karura-subql\n// // node: https://api.polkawallet.io/acala-subql\n// export async function subquery(\n//     query, \n//     url = \"https://api.subquery.network/sq/AcalaNetwork/karura\"\n// ) : Promise<fetch.Response> {\n//     return fetch.default(url, query);\n// }\n\nexport async function initAPI() : Promise<ApiPromise> {\n    // const wsProvider = new WsProvider('wss://kusama-rpc.polkadot.io/');\n    // const api = await ApiPromise.create({ provider: wsProvider });\n    \n    // TODO: set url in env\n    const wsProvider = new WsProvider('wss://karura.api.onfinality.io/public-ws');\n    const api = await ApiPromise.create(options({\n        provider: wsProvider,\n    }));\n    return api;\n}\n\nexport function startOfDay(date: Date) : Date {\n    date.setUTCHours(0);\n    date.setUTCMinutes(0);\n    date.setUTCSeconds(0);\n    date.setUTCMilliseconds(0);\n    return date;\n}\n\nexport function endOfDay(date: Date) : Date {\n    date.setUTCHours(23);\n    date.setUTCMinutes(59);\n    date.setUTCSeconds(59);\n    date.setUTCMilliseconds(999);\n    return date;\n}","import { querySwap, querySwapFromBlock, historyRateFromLiquidity } from './data';\nimport { PoolData, SwapEvent, RawSwapAction, LiquidityPoolData } from './model';\nimport { endOfDay, startOfDay } from '../utils';\nimport { liquidtyConfig, NATIVE } from './config';\nimport { lastBlockFromSubquery } from '../block';\nimport { ApiPromise } from '@polkadot/api';\n// import BN from 'bn.js';\n// import * as fs from 'fs';\n\n/// ASSUMPTION:\n/// 1 block is 12000 ms\n/// 1 day is 7200 blocks, may put 7300 for query excess data\n\nexport function computeLiquidityPoolData(swaps: RawSwapAction[]) : LiquidityPoolData[] {\n\tif (swaps.length === 0) return [];\n\tvar last24hSwaps = filterRawSwapEventOnLast24h(swaps);\n\tvar pool24h: Map<string, PoolData> = categorizeSwapEventsToPool(last24hSwaps);\n\tpool24h.forEach((pool, pair) => {\n\t\tcalculatePoolVolume(pool);\n\t});\n\n\tvar swapsByDay = separateRawSwapEventByDay(swaps);\n\tconst pool7d : Map<string, PoolData[]> = new Map();\n\tfor (var swapsOfDay of swapsByDay) {\n\t\tvar pools: Map<string, PoolData> = categorizeSwapEventsToPool(swapsOfDay);\n\t\tpools.forEach((pool, pair) => {\n\t\t\tif (!pool7d.has(pair)) {\n\t\t\t\tpool7d.set(pair, []);\n\t\t\t}\n\t\t\tcalculatePoolVolume(pool);\n\t\t\tpool7d.get(pair)?.push(pool);\n\t\t});\n\t}\n\n\tconst liquidityData: LiquidityPoolData[] = []; \n\tpool24h.forEach((data, pair) => {\n\t\tliquidityData.push(new LiquidityPoolData(\n\t\t\tpair,\n\t\t\tdata,\n\t\t\tpool7d.get(pair)?? [],\n\t\t));\n\t});\n\n\treturn liquidityData;\n}\n\nexport async function getSwapEventOnLast24h() : Promise<SwapEvent[]> {\n\t// Start of day, set at UTC 00:00:00.000\n\tvar date: Date = new Date();\n\tdate.setHours(date.getHours() - 24);\n\tvar fromBlockEstimate = (await lastBlockFromSubquery()).number - 7300;\n\n\t// first query, expected only need one query\n\tvar swapEvents = await querySwapFromBlock(fromBlockEstimate);\n\t\n\t// repeat query until reach more than 24h\n\tvar reach24h: boolean = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n\twhile(reach24h) {\n\t\tvar swapEvents2 = await querySwap(100, swapEvents.length);\n\t\tswapEvents.push(...swapEvents2);\n\t\treach24h = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n\t}\n\n\t// Cut the list to only within 24h\n\tfor (var i = swapEvents.length - 1; i >= 0; i--) {\n\t\tif(swapEvents[i].block!.timestamp < date.getTime()) {\n\t\t\t\tswapEvents.pop();\n\t\t} else {\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n  return swapEvents;\n}\n\nexport async function getSwapEventUntilDate(date?: Date) : Promise<SwapEvent[]> {\n\t// Start of day, set at UTC 00:00:00.000\n\tif (date == null) {\n\t\t// default as a week (6 days + today) \n\t\tdate = startOfDay(new Date());\n\t\tdate.setUTCDate(date.getUTCDate() - 6);\n\t}\n\n\t// get block number from, with the milliseconds different, plus 100 as extra\n\tvar millisecondsDifferent = ((new Date()).getTime() - date.getTime());\n\tvar fromBlockEstimate = (await lastBlockFromSubquery()).number - (millisecondsDifferent / 12000 + 100);\n\n\t// first query, expected only need one query\n\tvar swapEvents = await querySwapFromBlock(fromBlockEstimate);\n\t\n\t// repeat query until reach more than date\n\tvar reachDate: boolean = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n\twhile(reachDate) {\n\t\tvar swapEvents2 = await querySwap(100, swapEvents.length);\n\t\tswapEvents.push(...swapEvents2);\n\t\treachDate = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n\t}\n\n\t// Cut the list to only within date\n\tfor (var i = swapEvents.length - 1; i >= 0; i--) {\n\t\tif(swapEvents[i].block!.timestamp < date.getTime()) {\n\t\t\t\tswapEvents.pop();\n\t\t} else {\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn swapEvents;\n}\n\nexport function separateSwapEventByDay(swaps: SwapEvent[]) : SwapEvent[][] {\n    var swapsWithDays: SwapEvent[][] = [[]];\n    var endOfToday = endOfDay(new Date(swaps[swaps.length-1].block!.timestamp)).getTime();\n    while (swaps.length > 0) {\n        var swap = swaps.pop()!;\n        if (swap.block!.timestamp > endOfToday) {\n            swapsWithDays.push([]);\n            endOfToday = endOfDay(new Date(swap.block!.timestamp)).getTime();\n        }\n        swapsWithDays[swapsWithDays.length-1].push(swap);\n    }\n\n    return swapsWithDays;\n}\n\n// // only for swap before block 408594\n// export async function handlingSwapEventInterswap(swaps: SwapEvent[], api: ApiPromise) : Promise<void> {\n//     var logs: string[] = [];\n//     for (var swap of swaps) {\n//         // handle interswap\n//         if (swap.currency.length === swap.amount.length) {\n//             continue;\n//         }\n//         // ROUGH-CALCULATION\n//         for (var i = 0; i < swap.currency.length - 2; i++) {\n//             var fromSymbol = swap.currency[i];\n//             var toSymbol = swap.currency[i+1];\n//             // rate of fromSymbol to 1 toSymbol\n//             // TODO: inprove calculation\n//             var rate = await historyRateFromLiquidity(swap.blockNumber-1, api, fromSymbol, toSymbol);\n//             // amount * 0.997 / rate\n//             var amount = swap.amount[i] * BigInt('997000000000000000') / rate;\n//             swap.amount.splice(i+1, 0, amount);\n//         }\n//         // prepare logs\n//         logs.push(JSON.stringify(swap, null, \"\\t\"));\n//     }\n// }\n\n// break complex swap event into raw swap action\n// must be called after handlingInterswap or else will skip complex swapping\nexport function transformRawSwapAction(swaps: SwapEvent[]) : [ RawSwapAction[], number ] {\n    var rawSwaps: RawSwapAction[] = [];\n    var skip: number = 0;\n    for (var swap of swaps) {\n        if (swap.currency.length > 2 && swap.amount.length === 2) {\n            // skip old event inter-swap amount as handlingInterswap not called\n            // TODO: emit warning\n            skip++;\n            continue;\n        }\n        for (var i = 0; i < swap.currency.length - 1; i++) {\n            var rawSwap: RawSwapAction = new RawSwapAction({\n                id: swap.id!,\n                block: swap.block!,\n                blockNumber: swap.blockNumber!,\n                fromCurrency: swap.currency[i],\n                toCurrency: swap.currency[i+1],\n                fromAmount: swap.amount[i],\n                toAmount: swap.amount[i+1],\n            });\n            rawSwaps.push(rawSwap);\n        }\n    }\n\n    return [rawSwaps, skip];\n}\n\nexport function separateRawSwapEventByDay(swaps: RawSwapAction[]) : RawSwapAction[][] {\n\tvar swapsWithDays: RawSwapAction[][] = [[]];\n\tvar endOfToday = endOfDay(new Date(swaps[swaps.length-1].block!.timestamp)).getTime();\n\twhile (swaps.length > 0) {\n\t\t\tvar swap = swaps.pop()!;\n\t\t\tif (swap.block!.timestamp > endOfToday) {\n\t\t\t\t\tswapsWithDays.push([]);\n\t\t\t\t\tendOfToday = endOfDay(new Date(swap.block!.timestamp)).getTime();\n\t\t\t}\n\t\t\tswapsWithDays[swapsWithDays.length-1].push(swap);\n\t}\n\n\treturn swapsWithDays;\n}\n\nexport function filterRawSwapEventOnLast24h(swapEvents: RawSwapAction[]) : RawSwapAction[] {\n\t// Start of day, set at UTC 00:00:00.000\n\tvar date: Date = new Date();\n\tdate.setHours(date.getHours() - 24);\n\n\tvar index = 0;\n\tfor (var i = 0; i < swapEvents.length; i++) {\n\t\tindex = i;\n\t\tif (swapEvents[i].block!.timestamp < date.getTime())\n\t\t\tbreak;\n\t}\n\n  return swapEvents.slice(0, index);\n}\n\nexport function categorizeSwapEventsToPool(swaps: RawSwapAction[]): Map<string, PoolData> {\n    var poolMap: Map<string, PoolData> = new Map();\n    for (var swap of swaps) {\n        var pair = liquidtyConfig[swap.fromCurrency][swap.toCurrency];\n        if (!poolMap.has(pair)) {\n            poolMap.set(pair, new PoolData(pair));\n        }\n        poolMap.get(pair)!.rawSwaps.push(swap);\n    }\n    poolMap.forEach((pool, _) => {\n        pool.date = startOfDay(new Date(swaps[0].block.timestamp)).toUTCString();\n        // TODO: get accurate last block of the days\n        pool.lastBlockNumber = swaps[0].blockNumber;\n    });\n    return poolMap;\n}\n\nexport function calculatePoolVolume(pool: PoolData) {\n    for (var swap of pool.rawSwaps) {\n        if (pool.token0 === NATIVE || pool.token1 === NATIVE) {\n            if (swap.fromCurrency === NATIVE) {\n                var nativeTraded = Number(swap.fromAmount) / 1000000000000;\n                pool.volumeNative += nativeTraded;\n            } else {\n                var nativeTraded = (Number(swap.toAmount) / 1000000000000) / 0.997;\n                pool.volumeNative += nativeTraded;\n            }\n        } else {\n            // TODO: calculation on none NATIVE\n        }\n    }\n}","import { Block } from \"../dex\";\nimport { request, gql } from \"graphql-request\";\nimport { SubqueryUrl } from '../config';\n\nexport async function lastBlockFromSubquery() : Promise<Block> {\n    const {\n        blocks: {\n            nodes\n        }\n    } = await request(\n        SubqueryUrl,\n        gql`\n            query {\n                blocks (\n                    orderBy: NUMBER_DESC\n                    first: 1\n                ) {\n                    nodes {\n                        id\n                        number\n                        timestamp\n                    }\n                }\n            }\n        `\n    );\n    var obj: any = nodes[0];\n    // return obj;\n    return Block.fromJson(obj)\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { useQuery } from 'react-query';\nimport { categorizeSwapEventsToPool, liquidityData, querySwapFromBlock, transformRawSwapAction } from '.';\nimport { startOfDay } from '../utils';\nimport { volume24HQuery, volume7DQuery } from './dex.service';\nimport { DexStateInterface } from './dex.state';\nimport { computeLiquidityPoolData } from './liquidity.calculation';\n\nconst ONE_BLOCK_TIME = 12000; // ms\n\n// export function Volume7DayQuery() {\n// \treturn useQuery(\"volume7d\", async () => {\n// \t\treturn volume7DQuery();\n// \t});\n// }\n\n// export function Volume24HQuery() {\n// \treturn useQuery(\"volume24h\", async () => {\n// \t\treturn volume24HQuery();\n// \t});\n// }\n\nexport function LiquidityDataQuery() {\n\treturn useQuery(\"liquidityData\", async () => {\n\t\treturn liquidityData();\n\t});\n}\n\nexport async function querySwapUpdate(\n\ttoBlock: number, \n\tstate: DexStateInterface, \n\tdispatch: Dispatch<SetStateAction<Partial<DexStateInterface>>>\n) {\n\tvar fromBlock = state.lastBlock;\n\tvar swapEvents = await querySwapFromBlock(fromBlock, toBlock);\n\tvar [rawSwapActions, _] = transformRawSwapAction(swapEvents);\n\n\tconsole.log(`\\t\\tupdate: ${state.lastBlock} -> ${toBlock}`);\n\trawSwapActions.push(...state.swap);\n\tconsole.log(`\\t\\tswap count: ${rawSwapActions.length}`);\n\t\n\t// TODO: insert rawSwapActions\n\tvar data = computeLiquidityPoolData([...rawSwapActions]);\n\tdispatch({\n\t  lastBlock: toBlock,\n\t  swap: rawSwapActions,\n\t\tdata: data,\n\t\tloaded7d: state.loaded7d,\n\t})\n}\n\nexport const querySwapData = (\n\tlastBlock: number, \n\tdispatch: Dispatch<SetStateAction<Partial<DexStateInterface>>>\n) => {\n\tquery24hSwapData(lastBlock, dispatch);\n}\n\nasync function query24hSwapData(lastBlock: number, dispatch: Dispatch<SetStateAction<Partial<DexStateInterface>>>) {\n\tvar state: Partial<DexStateInterface> = {\n\t\tlastBlock: lastBlock,\n\t}\n\t// dispatch(state);\n\n\tvar date: Date = new Date();\n\tdate.setHours(date.getHours() - 24);\n\tvar fromBlockEstimate = lastBlock - 7300;\n\n\t// first query, expected only need one query\n\tvar swapEvents = await querySwapFromBlock(fromBlockEstimate);\n\tvar [rawSwapActions, _] = transformRawSwapAction(swapEvents);\n\n\tvar untilBlock = rawSwapActions[rawSwapActions.length - 1].blockNumber - 1;\n\tstate.swap = rawSwapActions;\n\tconsole.log(`\\t\\t24h swap count: ${rawSwapActions.length}`);\n\n\tstate.data = computeLiquidityPoolData([...rawSwapActions]);\n\tstate.loaded7d = false;\n\tdispatch(state);\n\n\tqueryUntil7dSwapData(untilBlock, state as DexStateInterface, dispatch);\n}\n\n// TODO: should be replaced by better algo\n// continueBlock: block query until at query24hSwapData, will continue from the block\nasync function queryUntil7dSwapData(continueBlock: number, state: DexStateInterface, dispatch: Dispatch<SetStateAction<Partial<DexStateInterface>>>) {\n\t// one week ago\n\tvar date = startOfDay(new Date());\n\tdate.setUTCDate(date.getUTCDate() - 6);\n\n\t// get block number from, with the milliseconds different, plus 600 as extra\n\tvar millisecondsDifferent = ((new Date()).getTime() - date.getTime());\n\tvar fromBlockEstimate = continueBlock - (millisecondsDifferent / ONE_BLOCK_TIME + 300);\n\n\t// first query, expected only need one query\n\tvar swapEvents = await querySwapFromBlock(fromBlockEstimate, continueBlock);\n\n\t// Cut the list to only within date\n\tfor (var i = swapEvents.length - 1; i >= 0; i--) {\n\t\tif(swapEvents[i].block!.timestamp < date.getTime()) {\n\t\t\tswapEvents.pop();\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar [rawSwapActions, _] = transformRawSwapAction(swapEvents);\n\n\t// TODO: insert rawSwapActions\n\tstate.swap.push(...rawSwapActions);\n\tstate.data = computeLiquidityPoolData([...state.swap]);\n\tstate.loaded7d = true;\n\tconsole.log(`\\t\\t7d swap count: ${state.swap.length}`);\n\n\tdispatch(state);\n}","import { createTheme } from '@material-ui/core/styles';\n\nexport const theme = createTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      light: '#e40c5b',\n      main: '#f53347',\n      dark: '#f53347',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});","import React, { createContext, useState, useContext, Dispatch, SetStateAction } from \"react\";\nimport { LiquidityPoolData, RawSwapAction } from \"./model\";\n\nexport interface DexStateInterface {\n  lastBlock: number;\n  swap: RawSwapAction[];\n  data: LiquidityPoolData[];\n  loaded7d: boolean;\n}\n\nconst DexStateContext = createContext({\n  state: {} as Partial<DexStateInterface>,\n  dispatch: {} as Dispatch<SetStateAction<Partial<DexStateInterface>>>,\n});\n\nconst DexStateProvider = ({\n  children,\n  value = {} as DexStateInterface,\n}: {\n  children: React.ReactNode;\n  value?: Partial<DexStateInterface>;\n}) => {\n  const [state, dispatch] = useState(value);\n  return (\n    <DexStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </DexStateContext.Provider>\n  );\n};\n\nconst useDexState = () => {\n  const context = useContext(DexStateContext);\n  if (!context) {\n    throw new Error(\"useDexState must be used within a DexStateContext\");\n  }\n  return context;\n};\n\nexport { DexStateProvider, useDexState };","import React, { useState, useEffect } from 'react';\nimport { LastBlockNumberQuery, LastBlockQuery } from './block';\nimport { \n  querySwapData, \n  querySwapUpdate \n} from './dex/dex.query';\nimport { makeStyles } from '@material-ui/core/styles';\nimport dayjs from 'dayjs'\nimport {\n  Paper, List, Box, Grid\n} from '@material-ui/core';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\nimport { theme } from './theme';\nimport { useDexState } from './dex/dex.state';\n\nconst useStyles = makeStyles((theme) => ({\n  displayContent: {\n    display: 'flex',\n    // flexWrap: 'wrap',\n    flexDirection: 'column',\n    '& > *': {\n      margin: theme.spacing(1),\n      width: theme.spacing(80),\n      height: theme.spacing(32),\n    },\n  },\n  paperCard: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  syncTitle: {\n    '& > *': {\n      margin: theme.spacing(0),\n    },\n  },\n  smallTitle: {\n    fontSize: 12,\n  },\n  smallValue: {\n    fontSize: 20,\n  },\n}));\n\nexport function LastBlockSync() {\n  const classes = useStyles();\n\n  const { isLoading, error, data } = LastBlockQuery();\n  const { state, dispatch } = useDexState();\n\n  if (!isLoading && error === null) {\n    if (state.lastBlock === undefined) {\n      querySwapData(data.number, dispatch);\n    } else if (state.lastBlock !== data.number) {\n      querySwapUpdate(data.number, state, dispatch);\n    }\n  }\n\n  // if (state.swap !== undefined) {\n  //   console.log(`LastBlockSync swap: ${state.swap.length}`);\n  // }\n\n  if (isLoading) return 'Loading...'\n\n  if (error) return 'An error has occurred: ' + error.message\n  \n  return (\n    <div className={classes.syncTitle}>\n      <p>Sync At Block <strong>{data.number}</strong></p>\n      <p className={classes.smallTitle}>{new Date(data.timestamp).toUTCString()}</p>\n    </div>\n  )\n}\n\nexport function LiquidityDataComponent() {\n  const classes = useStyles();\n\n  const { state } = useDexState();\n\n  if (state.swap === undefined) return 'Loading...';\n  // console.log(`LiquidityDataComponent: ${(state.swap?? []).length}`);\n\n  if (state.swap.length <= 0) return 'No Data';\n\n  return (\n    <div>\n      { (!state.loaded7d)? (<div>Loading 7 days data...</div>) : (<div/>)}\n      <List className={classes.displayContent}>\n        {state.data.map((pool,index)=>{\n          console.log(`\\tPool: ${pool.pair}`);\n          // return (`${pool.pair}`);\n          return <LiquidityPoolDataCard pool={pool} key={pool.pair}/>\n        })}\n      </List>\n    </div>\n  );\n}\n\nfunction LiquidityPoolDataCard(props) {\n  const pool = props.pool\n  const classes = useStyles();\n\n  const [value, setValue] = useState(undefined);\n  const [date, setDate] = useState(undefined);\n\n  return (\n    <Paper elevation={0}>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <Box p={1} pt={1}>\n              {pool.pair}\n          </Box>\n\n          <Box pl={1} pt={1} className={classes.smallTitle}>\n            TVL\n          </Box>\n          <Box pl={1} pb={1} className={classes.smallValue}>\n            not ready\n          </Box>\n          \n          <Box pl={1} pt={1} className={classes.smallTitle}>\n            24h Volume\n          </Box>\n          <Box pl={1} pb={1} className={classes.smallValue}>\n              {pool.data24h.volumeNative.toFixed(3)} KSM\n          </Box>\n\n          <Box pl={1} pt={1} className={classes.smallTitle}>\n            24h Fees\n          </Box>\n          <Box pl={1} pb={1} className={classes.smallValue}>\n            {(pool.data24h.volumeNative*0.003).toFixed(3)} KSM\n          </Box>\n\n          <Box pl={1} pt={1} className={classes.smallTitle}>\n            {date}\n          </Box>\n          <Box pl={1} pb={1} className={classes.smallValue}>\n            {value}\n          </Box>\n        </Grid>\n        <Grid item xs={8}>\n          <BarChart\n            width={444}\n            height={256}\n            data={pool.dataByDays}\n            margin={{\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5\n            }}\n            onMouseLeave={() => {\n              setValue(undefined);\n              setDate(undefined);\n            }}\n            >\n            {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n            {/* <XAxis dataKey=\"date\" /> */}\n            {/* <YAxis /> */}\n            <Tooltip \n              cursor={{ fill: theme.palette.secondary.dark }}\n              contentStyle={{ display: 'none' }}\n              formatter={(value, name, props) => {\n                setValue(props.payload.volumeNative.toFixed(3) + ' KSM');\n                setDate(dayjs(props.payload.date).format('MMM D, YYYY'));\n              }}\n            />\n            {/* <Legend /> */}\n            <Bar dataKey=\"volumeNative\" fill={theme.palette.primary.main} />\n          </BarChart>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}","import { useQuery } from 'react-query';\nimport { lastBlockFromSubquery } from './block.service';\n\nexport function LastBlockNumberQuery() {\n    return useQuery(\"lastBlockNumber\", async () => {\n        return (await lastBlockFromSubquery()).number;\n    }, {\n        cacheTime: 60 * 1000,\n        staleTime: 30 * 1000,\n    });\n}\n\nexport function LastBlockQuery() {\n    return useQuery(\"lastBlock\", async () => {\n        return lastBlockFromSubquery();\n    }, {\n        cacheTime: 60 * 1000,\n        staleTime: 30 * 1000,\n    });\n}","import './App.css';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nimport { LastBlockSync, LiquidityDataComponent, Length } from './app.component';\nimport { theme } from './theme';\n\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport {\n  AppBar, Toolbar, Typography\n} from '@material-ui/core';\nimport { DexStateProvider } from './dex/dex.state';\nimport React from 'react';\n\n// https://github.com/Uniswap/uniswap-v3-info/blob/188b6e666afd7e7c00d20a8731cd0ea76fccc6c9/src/components/BarChart/alt.tsx\n// https://github.com/Uniswap/uniswap-v3-info/blob/188b6e666afd7e7c00d20a8731cd0ea76fccc6c9/src/components/LineChart/alt.tsx\n\nconst queryClient = new QueryClient();\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    flexGrow: 1,\n    position: 'fixed',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  topRight: {\n    alignContent: \"right\",\n  },\n  displayContent: {\n    display: 'flex',\n    // flexWrap: 'wrap',\n    flexDirection: 'column',\n    '& > *': {\n      margin: theme.spacing(1),\n      width: theme.spacing(80),\n      height: theme.spacing(32),\n    },\n  },\n  display: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <QueryClientProvider client={queryClient}>\n        <div className=\"App-background\">\n            <DexStateProvider>\n              \n                <CustomAppBar/>\n\n                <div className=\"App\">\n                  {/* <div className={classes.display}> */}\n                    <LiquidityDataComponent/>\n                    {/* <Length/> */}\n                  {/* </div> */}\n                </div>\n            </DexStateProvider>\n        </div>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nfunction CustomAppBar() {\n  const classes = useStyles();\n\n  return (\n    // <div className={classes.appBar}>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Karura Info\n          </Typography>\n          <Typography variant=\"h6\" className={classes.topRight}>\n            <LastBlockSync/>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    // </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}