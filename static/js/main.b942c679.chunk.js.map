{"version":3,"sources":["dex/model.ts","dex/config.ts","dex/data.ts","utils.ts","dex/calculation.ts","dex/dex.service.ts","block/block.service.ts","theme.js","app.query.js","block/block.query.ts","dex/dex.query.ts","App.js","reportWebVitals.js","index.js"],"names":["Block","id","timestamp","number","this","args","Date","parse","SwapEvent","blockNumber","block","currency","amount","startAmount","endAmount","BigInt","obj","swappingToken","result","fromJson","data","length","JSON","c","push","token","swappingAmount","a","PoolData","pair","rawSwaps","volumeNative","volumeUSD","liquidityNative","liquidityUSD","date","lastBlockNumber","split","RawSwapAction","raw","fromCurrency","fromAmount","toCurrency","toAmount","LiquidityPoolData","data24h","dataByDays","NATIVE","liquidtyConfig","querySwap","count","offset","url","request","gql","nodes","events","swapEvents","querySwapFromBlock","fromBlock","startOfDay","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","endOfDay","getSwapEventOnLast24h","setHours","getHours","lastBlockFromSubquery","fromBlockEstimate","reach24h","getTime","swapEvents2","i","pop","getSwapEventUntilDate","setUTCDate","getUTCDate","millisecondsDifferent","reachDate","separateSwapEventByDay","swaps","swapsWithDays","endOfToday","swap","transformRawSwapAction","skip","rawSwap","categorizeSwapEventsToPool","poolMap","Map","has","set","get","forEach","pool","_","toUTCString","calculatePoolVolume","token0","token1","nativeTraded","Number","volume24HQuery","pools","volume7DQuery","swapsByDay","poolData","swapsOfDay","liquidityData","data7d","blocks","theme","createTheme","palette","type","primary","light","main","dark","contrastText","secondary","useStyles","makeStyles","displayContent","display","flexDirection","margin","spacing","width","height","paperCard","syncTitle","smallTitle","fontSize","smallValue","LastBlockSync","classes","useQuery","isLoading","error","message","className","LiquidityDataComponent","List","map","index","LiquidityPoolDataCard","props","useState","undefined","value","setValue","setDate","Paper","elevation","Grid","container","item","xs","Box","p","pt","pl","pb","toFixed","BarChart","top","right","left","bottom","onMouseLeave","Tooltip","cursor","fill","contentStyle","formatter","name","payload","dayjs","format","Bar","dataKey","queryClient","QueryClient","appBar","flexGrow","position","menuButton","marginRight","title","topRight","alignContent","App","ThemeProvider","QueryClientProvider","client","CustomAppBar","AppBar","Toolbar","Typography","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b942c679.chunk.js","sourcesContent":["// import BN from 'bn.js';\n\nexport interface RawEvent { \n    id: string; \n    method: string; \n    data: any[];\n    blockNumber: number; \n    block: any;\n}\n\n// TODO: use gentype from acala\nexport class Block {\n    id: string;\n    timestamp: number;\n    number: number;\n\n    constructor(\n        id?: string,\n        timestamp?: number,\n        number?: number\n    ) {\n        this.id = id || '';\n        this.timestamp = timestamp || 0;\n        this.number = number || 0;\n    }\n\n    public static fromJson(args: { id: string, timestamp: string, number: number }) {\n        let result: Block = new Block(\n            args.id,\n            Date.parse(args.timestamp+'Z'),\n            args.number,\n        );\n        return result;\n    }\n}\n\n// TODO: use gentype from acala\nexport class SwapEvent {\n    id: string | undefined;\n    blockNumber: number | undefined;\n    block: Block | undefined;\n    // data\n    currency: string[];\n    amount: bigint[];\n    startAmount: bigint;\n    endAmount: bigint;\n\n    constructor() {\n        this.id = '';\n        this.blockNumber = 0;\n        this.currency = [];\n        this.amount = [];\n        this.startAmount = BigInt(0);\n        this.endAmount = BigInt(0);\n    }\n\n    public static fromJson(obj: RawEvent) {\n        let result: SwapEvent = new SwapEvent();\n        result.id = obj.id;\n        result.blockNumber = obj.blockNumber;\n        result.block = Block.fromJson(obj.block as { id: string, timestamp: string, number: number });\n        var swappingToken: { token: string }[]\n        if (obj.data.length === 4) {\n            // old structure: Swap(T::AccountId, Vec<CurrencyId>, Balance, Balance)\n            swappingToken = JSON.parse(obj['data'][1]['value']);\n            result.currency = [];\n            for (var c of swappingToken) {\n                result.currency.push(c.token);\n            }\n            result.startAmount = BigInt(obj['data'][2]['value']);\n            result.endAmount = BigInt(obj['data'][3]['value']);\n            result.amount = [ result.startAmount, result.endAmount ];\n        } else {\n            // new structure: Swap(T::AccountId, Vec<CurrencyId>, Vec<Balance>)\n            // from commit 5afdb835eede2e0f417dff561167c26e81ddb571 @ AcalaNetwork/Acala \n            swappingToken = JSON.parse(obj['data'][1]['value']);\n            result.currency = [];\n            for (var c of swappingToken) {\n                result.currency.push(c.token);\n            }\n            result.amount = [];\n            var swappingAmount: any[] = JSON.parse(obj['data'][2]['value']);\n            for (var a of swappingAmount) {\n                result.amount.push(a);\n            }\n            // TODO: validate whether this is needed\n            result.startAmount = result.amount[0];\n            result.endAmount = result.amount[result.amount.length - 1];\n        }\n        return result;\n    }\n}\n\nexport class PoolData {\n    pair: string; // in format of `{token0}-{token1}`\n    rawSwaps: RawSwapAction[];\n    volumeNative: number = 0;\n    volumeUSD: number = 0;\n\n    liquidityNative: number = 0;\n    liquidityUSD: number = 0;\n    \n    date: string;\n    lastBlockNumber: number;\n\n    constructor(\n        pair: string,\n        rawSwaps: RawSwapAction[] = [],\n    ) {\n        this.pair = pair;\n        this.rawSwaps = rawSwaps;\n\n        this.date = '';\n        this.lastBlockNumber = 0;\n    }\n\n    get token0(): string {\n        return this.pair.split('-')[0];\n    }\n\n    get token1(): string {\n        return this.pair.split('-')[1];\n    }\n}\n\n// Raw data from SwapEvent with clear from which currency to which currency\nexport class RawSwapAction {\n    id: string; // SwapEvent id\n    blockNumber: number; // SwapEvent blockNumber\n    block: Block; // SwapEvent Block\n    // data\n    fromCurrency: string;\n    fromAmount: bigint;\n    toCurrency: string;\n    toAmount: bigint;\n\n    constructor(raw: {\n        id: string,\n        blockNumber: number,\n        block: Block,\n        fromCurrency: string,\n        fromAmount: bigint,\n        toCurrency: string,\n        toAmount: bigint,\n    }) {\n        this.id = raw.id;\n        this.blockNumber = raw.blockNumber;\n        this.block = raw.block;\n        this.fromAmount = raw.fromAmount;\n        this.fromCurrency = raw.fromCurrency;\n        this.toAmount = raw.toAmount;\n        this.toCurrency = raw.toCurrency;\n    }\n}\n\nexport class LiquidityPoolData {\n    pair: string;\n    data24h: PoolData;\n    dataByDays: PoolData[];\n\n    constructor(\n        pair: string,\n        data24h: PoolData,\n        dataByDays: PoolData[],\n    ) {\n        this.pair = pair;\n        this.data24h = data24h;\n        this.dataByDays = dataByDays;\n    }\n}","export const NATIVE = \"KSM\";\n\nexport var liquidtyConfig: any = {\n    \"KAR\": {\n        \"KSM\": \"KAR-KSM\",\n    },\n    \"KUSD\": {\n        \"KSM\": \"KUSD-KSM\",\n    },\n    \"KSM\": {\n        \"KAR\": \"KAR-KSM\",\n        \"KUSD\": \"KUSD-KSM\",\n    }\n}","import { request, gql } from \"graphql-request\";\nimport { SwapEvent } from \"./model\";\nimport { ApiPromise } from '@polkadot/api';\nimport { AnyNumber } from '@polkadot/types/types';\nimport { liquidtyConfig, NATIVE } from './config';\n\n// query with graphql format on subql-node\n// node: https://api.subquery.network/sq/AcalaNetwork/karura\n// node: https://api.polkawallet.io/karura-subql\n\n/// default as KAR KSM\nexport async function historyRateFromLiquidity(\n    blockNumber: AnyNumber, \n    karuraApi: ApiPromise, \n    token0: string = 'KAR',\n    token1: string = 'KSM'\n) : Promise<bigint> {\n    const pair: string = liquidtyConfig[token0][token1];\n    var tokens = pair.split('-');\n    const blockHash = await karuraApi.rpc.chain.getBlockHash(blockNumber);\n    const liquidityKAR = await karuraApi.query.dex.liquidityPool.at(blockHash, [\n        { Token: tokens[0] },\n        { Token: tokens[1] },\n    ]);\n    /*\n        for block 240000\n        [\"0x000000000000000005d4a5a29ff1d21b\",\"0x0000000000000000002b508bdb92205f\"]\n        [ '420.1427 kKAR', '12.1919 kKAR' ]\n    */\n    var token0Balance = BigInt((liquidityKAR as any)[0].toString());\n    var token1Balance = BigInt((liquidityKAR as any)[1].toString());\n\n    // rate of token0 : token1\n    // how many token0 equal to a token1\n    // var _rate = token0Balance.mul(new BN('1000000000000000000')).div(token1Balance);\n    // var rate = _rate.toNumber() / 1000000000000\n    \n    if (token0 === tokens[0]) {\n        return token0Balance * BigInt('1000000000000000000') / (token1Balance);\n    }\n    return token1Balance * BigInt('1000000000000000000') / (token0Balance);\n}\n\n/// price of native relay chain\n/// available only after block 276231 for karura KSM\nexport async function historyNativePrice(blockNumber: AnyNumber, karuraApi: ApiPromise) : Promise<bigint> {\n    const blockHash = await karuraApi.rpc.chain.getBlockHash(blockNumber);\n    const nativeValueTimestamp = await karuraApi.query.acalaOracle.values.at(blockHash, { Token: NATIVE });\n    /*{\n        value: '297,940,000,000,000,000,000',\n        timestamp: '1,629,213,594,519'\n      }*/\n    // // old method\n    // var json: { value: string, timestamp: string } = JSON.parse(JSON.stringify(nativeValueTimestamp.toHuman()));\n    // var priceInBN = new BN(json.value.replace(RegExp(/,/g), ''));\n    // console.log(json.value.replace(RegExp(/,/g), ''));\n    // console.log(priceInBN.toString());\n    // console.log(priceInBN.toString(16));\n    \n    var json: { value: any, timestamp: any } = JSON.parse(nativeValueTimestamp.toString());\n    var priceInBN = BigInt(json.value);\n    return priceInBN;\n}\n\n// this will be limited on 100 events, if u know the event u wan from block, can use querySwapFromBlock\nexport async function querySwap(\n    count: number, \n    offset: number = 0, \n    url = 'https://api.subquery.network/sq/AcalaNetwork/karura'\n) : Promise<SwapEvent[]> {\n    const {\n        events: {\n            nodes\n        }\n    } = await request(\n        url,\n        gql`\n            query {\n                events (\n                    first: ${count}\n                    offset: ${offset}\n                    orderBy: BLOCK_NUMBER_DESC\n                    filter: {\n                        method: { equalTo: \"Swap\" }\n                    }\n                ) {\n                    nodes {\n                        id\n                        method\n                        data\n                        blockNumber\n                        block {\n                            id\n                            timestamp\n                            number\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    var swapEvents: SwapEvent[] = [];\n    for (var obj of nodes) {\n        swapEvents.push(SwapEvent.fromJson(obj));\n    }\n    \n    return swapEvents;\n}\n\nexport async function querySwapFromBlock(\n    fromBlock: number, \n    url = 'https://api.subquery.network/sq/AcalaNetwork/karura',\n) : Promise<SwapEvent[]> {\n    const {\n        events: {\n            nodes\n        }\n    } = await request(\n        url,\n        gql`\n            query {\n                events (\n                    orderBy: BLOCK_NUMBER_DESC\n                    filter: {\n                        method: { equalTo: \"Swap\" }\n                        blockNumber: { greaterThan: \"${fromBlock}\" }\n                    }\n                ) {\n                    nodes {\n                        id\n                        method\n                        data\n                        blockNumber\n                        block {\n                            id\n                            timestamp\n                            number\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    var swapEvents: SwapEvent[] = [];\n    for (var obj of nodes) {\n        swapEvents.push(SwapEvent.fromJson(obj));\n    }\n    \n    return swapEvents;\n}\n","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport {\n    options\n} from \"@acala-network/api\";\nimport BN from 'bn.js';\nimport * as fetch from \"node-fetch\";\n\nexport function quantityToNumber(bn: BN): number {\n    return bn.toNumber() / 1000000000000;\n}\n\nexport function priceToNumber(bn: BN): number {\n    return bn.div(new BN(1000000000000)).toNumber() / 1000000;\n}\n\n// // query with graphql format on subql-node\n// // node: https://api.subquery.network/sq/AcalaNetwork/karura\n// // node: https://api.polkawallet.io/karura-subql\n// export async function subquery(\n//     query, \n//     url = \"https://api.subquery.network/sq/AcalaNetwork/karura\"\n// ) : Promise<fetch.Response> {\n//     return fetch.default(url, query);\n// }\n\nexport async function initAPI() : Promise<ApiPromise> {\n    // const wsProvider = new WsProvider('wss://kusama-rpc.polkadot.io/');\n    // const api = await ApiPromise.create({ provider: wsProvider });\n    \n    // TODO: set url in env\n    const wsProvider = new WsProvider('wss://karura.api.onfinality.io/public-ws');\n    const api = await ApiPromise.create(options({\n        provider: wsProvider,\n    }));\n    return api;\n}\n\nexport function startOfDay(date: Date) : Date {\n    date.setUTCHours(0);\n    date.setUTCMinutes(0);\n    date.setUTCSeconds(0);\n    date.setUTCMilliseconds(0);\n    return date;\n}\n\nexport function endOfDay(date: Date) : Date {\n    date.setUTCHours(23);\n    date.setUTCMinutes(59);\n    date.setUTCSeconds(59);\n    date.setUTCMilliseconds(999);\n    return date;\n}","import { querySwap, querySwapFromBlock, historyRateFromLiquidity } from './data';\nimport { PoolData, SwapEvent, RawSwapAction } from './model';\nimport { endOfDay, startOfDay } from '../utils';\nimport { liquidtyConfig, NATIVE } from './config';\nimport { lastBlockFromSubquery } from '../block';\nimport { ApiPromise } from '@polkadot/api';\n// import BN from 'bn.js';\n// import * as fs from 'fs';\n\n/// ASSUMPTION:\n/// 1 block is 12000 ms\n/// 1 day is 7200 blocks, may put 7300 for query excess data\n\nexport async function getSwapEventOnLast24h() : Promise<SwapEvent[]> {\n    // Start of day, set at UTC 00:00:00.000\n    var date: Date = new Date();\n    date.setHours(date.getHours() - 24);\n    var fromBlockEstimate = (await lastBlockFromSubquery()).number - 7300;\n\n    // first query, expected only need one query\n    var swapEvents = await querySwapFromBlock(fromBlockEstimate, 'https://api.polkawallet.io/karura-subql');\n    \n    // repeat query until reach more than 24h\n    var reach24h: boolean = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n    while(reach24h) {\n        var swapEvents2 = await querySwap(100, swapEvents.length, 'https://api.polkawallet.io/karura-subql');\n        swapEvents.push(...swapEvents2);\n        reach24h = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n    }\n\n    // Cut the list to only within 24h\n    for (var i = swapEvents.length - 1; i >= 0; i--) {\n        if(swapEvents[i].block!.timestamp < date.getTime()) {\n            swapEvents.pop();\n        } else {\n            break;\n        }\n    }\n\n    return swapEvents;\n}\n\nexport async function getSwapEventUntilDate(date?: Date) : Promise<SwapEvent[]> {\n    // Start of day, set at UTC 00:00:00.000\n    if (date == null) {\n        // default as a week (6 days + today) \n        date = startOfDay(new Date());\n        date.setUTCDate(date.getUTCDate() - 6);\n    }\n\n    // get block number from, with the milliseconds different, plus 100 as extra\n    var millisecondsDifferent = ((new Date()).getTime() - date.getTime());\n    var fromBlockEstimate = (await lastBlockFromSubquery()).number - (millisecondsDifferent / 12000 + 100);\n\n    // first query, expected only need one query\n    var swapEvents = await querySwapFromBlock(fromBlockEstimate, 'https://api.polkawallet.io/karura-subql');\n    \n    // repeat query until reach more than date\n    var reachDate: boolean = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n    while(reachDate) {\n        var swapEvents2 = await querySwap(100, swapEvents.length, 'https://api.polkawallet.io/karura-subql');\n        swapEvents.push(...swapEvents2);\n        reachDate = swapEvents[swapEvents.length-1].block!.timestamp > date.getTime();\n    }\n\n    // Cut the list to only within date\n    for (var i = swapEvents.length - 1; i >= 0; i--) {\n        if(swapEvents[i].block!.timestamp < date.getTime()) {\n            swapEvents.pop();\n        } else {\n            break;\n        }\n    }\n\n    return swapEvents;\n}\n\nexport function separateSwapEventByDay(swaps: SwapEvent[]) : SwapEvent[][] {\n    var swapsWithDays: SwapEvent[][] = [[]];\n    var endOfToday = endOfDay(new Date(swaps[swaps.length-1].block!.timestamp)).getTime();\n    while (swaps.length > 0) {\n        var swap = swaps.pop()!;\n        if (swap.block!.timestamp > endOfToday) {\n            swapsWithDays.push([]);\n            endOfToday = endOfDay(new Date(swap.block!.timestamp)).getTime();\n        }\n        swapsWithDays[swapsWithDays.length-1].push(swap);\n    }\n\n    return swapsWithDays;\n}\n\n// // only for swap before block 408594\n// export async function handlingSwapEventInterswap(swaps: SwapEvent[], api: ApiPromise) : Promise<void> {\n//     var logs: string[] = [];\n//     for (var swap of swaps) {\n//         // handle interswap\n//         if (swap.currency.length === swap.amount.length) {\n//             continue;\n//         }\n//         // ROUGH-CALCULATION\n//         for (var i = 0; i < swap.currency.length - 2; i++) {\n//             var fromSymbol = swap.currency[i];\n//             var toSymbol = swap.currency[i+1];\n//             // rate of fromSymbol to 1 toSymbol\n//             // TODO: inprove calculation\n//             var rate = await historyRateFromLiquidity(swap.blockNumber-1, api, fromSymbol, toSymbol);\n//             // amount * 0.997 / rate\n//             var amount = swap.amount[i] * BigInt('997000000000000000') / rate;\n//             swap.amount.splice(i+1, 0, amount);\n//         }\n//         // prepare logs\n//         logs.push(JSON.stringify(swap, null, \"\\t\"));\n//     }\n// }\n\n// break complex swap event into raw swap action\n// must be called after handlingInterswap or else will skip complex swapping\nexport function transformRawSwapAction(swaps: SwapEvent[]) : [ RawSwapAction[], number ] {\n    var rawSwaps: RawSwapAction[] = [];\n    var skip: number = 0;\n    for (var swap of swaps) {\n        if (swap.currency.length > 2 && swap.amount.length === 2) {\n            // skip inter-swap amount as handlingInterswap not called\n            // TODO: emit warning\n            skip++;\n            continue;\n        }\n        for (var i = 0; i < swap.currency.length - 1; i++) {\n            var rawSwap: RawSwapAction = new RawSwapAction({\n                id: swap.id!,\n                block: swap.block!,\n                blockNumber: swap.blockNumber!,\n                fromCurrency: swap.currency[i],\n                toCurrency: swap.currency[i+1],\n                fromAmount: swap.amount[i],\n                toAmount: swap.amount[i+1],\n            });\n            rawSwaps.push(rawSwap);\n        }\n    }\n\n    return [rawSwaps, skip];\n}\n\nexport function categorizeSwapEventsToPool(swaps: RawSwapAction[]): Map<string, PoolData> {\n    var poolMap: Map<string, PoolData> = new Map();\n    for (var swap of swaps) {\n        var pair = liquidtyConfig[swap.fromCurrency][swap.toCurrency];\n        if (!poolMap.has(pair)) {\n            poolMap.set(pair, new PoolData(pair));\n        }\n        poolMap.get(pair)!.rawSwaps.push(swap);\n    }\n    poolMap.forEach((pool, _) => {\n        pool.date = startOfDay(new Date(swaps[0].block.timestamp)).toUTCString();\n        // TODO: get accurate last block of the days\n        pool.lastBlockNumber = swaps[0].blockNumber;\n    });\n    return poolMap;\n}\n\nexport function calculatePoolVolume(pool: PoolData) {\n    for (var swap of pool.rawSwaps) {\n        if (pool.token0 === NATIVE || pool.token1 === NATIVE) {\n            if (swap.fromCurrency === NATIVE) {\n                var nativeTraded = Number(swap.fromAmount) / 1000000000000;\n                pool.volumeNative += nativeTraded;\n            } else {\n                var nativeTraded = (Number(swap.toAmount) / 1000000000000) / 0.997;\n                pool.volumeNative += nativeTraded;\n            }\n        } else {\n            // TODO: calculation on none NATIVE\n        }\n    }\n}","import { \n    getSwapEventUntilDate, \n    separateSwapEventByDay,\n    getSwapEventOnLast24h,\n    transformRawSwapAction,\n    categorizeSwapEventsToPool, \n    calculatePoolVolume,\n    PoolData, \n    SwapEvent,\n    liquidtyConfig, NATIVE,\n    historyRateFromLiquidity,\n    LiquidityPoolData,\n} from '.';\nimport { lastBlockFromSubquery } from '../block';\n\nimport { quantityToNumber, endOfDay, initAPI, startOfDay } from '../utils';\n\nexport async function volume24HQuery() : Promise<Map<string, PoolData>> {\n    // var time1 = new Date();\n    // console.log(`START`);\n    \n    var swaps = await getSwapEventOnLast24h();\n    // console.log(`${swaps.length} trade made on last 24 hours`);\n\n    var [rawSwaps, skip] = transformRawSwapAction(swaps);\n    // console.log(`\\nskip ${skip} interswap\\n`);\n    var pools: Map<string, PoolData> = categorizeSwapEventsToPool(rawSwaps);\n    pools.forEach((pool, pair) => {\n        // console.log(`\\t${pool.rawSwaps.length} trades in ${pair}`);\n        calculatePoolVolume(pool);\n        // console.log(`\\t\\tVolume(KSM): ${pool.volumeNative}`);\n        // console.log(`\\t\\tFees(KSM): ${pool.volumeNative * 0.003} KSM`);\n    });\n\n    // var time2 = new Date();\n    // console.log(`\\nTime taken: ${time2.getTime() - time1.getTime()} ms`);\n    return pools;\n}\n\nexport async function volume7DQuery() : Promise<Map<string, PoolData[]>> {\n    // var time1 = new Date();\n    // console.log(`START`);\n\n    const timestamp = (await lastBlockFromSubquery()).timestamp; // get last sync\n    var date = startOfDay(new Date(timestamp));\n    date.setUTCDate(date.getUTCDate() - 6);\n    var swaps = await getSwapEventUntilDate(date);\n    // console.log('DONE QUERY\\n');\n    \n    var swapsByDay = separateSwapEventByDay(swaps);\n\n    const poolData : Map<string, PoolData[]> = new Map();\n\n    for (var swapsOfDay of swapsByDay) {\n        // console.log(`${swapsOfDay.length} trade made on ${\n        //     startOfDay(new Date(swapsOfDay[0].block!.timestamp)).toUTCString()\n        // }`);\n\n        // computing\n        var [rawSwaps, _] = transformRawSwapAction(swapsOfDay);\n        // console.log(`\\nskip ${skip} interswap\\n`);\n        var pools: Map<string, PoolData> = categorizeSwapEventsToPool(rawSwaps);\n        pools.forEach((pool, pair) => {\n            if (!poolData.has(pair)) {\n                poolData.set(pair, []);\n            }\n            // console.log(`\\t${pool.rawSwaps.length} trades in ${pair}`);\n            calculatePoolVolume(pool);\n            // console.log(`\\t\\tVolume(KSM): ${pool.volumeNative}`);\n            // console.log(`\\t\\tFees(KSM): ${pool.volumeNative * 0.003} KSM`);\n            poolData.get(pair)?.push(pool);\n        });\n        // console.log('');\n    }\n\n    // var time2 = new Date();\n    // console.log(`\\nTime taken: ${time2.getTime() - time1.getTime()} ms`);\n    return poolData;\n}\n\nexport async function liquidityData() : Promise<LiquidityPoolData[]> {\n    const data7d = await volume7DQuery();\n    const data24h = await volume24HQuery();\n    const liquidityData: LiquidityPoolData[] = [];\n    \n    data7d.forEach((data, pair) => {\n        liquidityData.push(new LiquidityPoolData(\n            pair,\n            data24h.get(pair)?? new PoolData(pair),\n            data?? []\n        ));\n    });\n\n    return liquidityData;\n}","import { Block } from \"../dex\";\nimport { request, gql } from \"graphql-request\";\n\nexport async function lastBlockFromSubquery(\n    url = 'https://api.subquery.network/sq/AcalaNetwork/karura'\n) : Promise<Block> {\n    const {\n        blocks: {\n            nodes\n        }\n    } = await request(\n        url,\n        gql`\n            query {\n                blocks (\n                    orderBy: NUMBER_DESC\n                    first: 1\n                ) {\n                    nodes {\n                        id\n                        number\n                        timestamp\n                    }\n                }\n            }\n        `\n    );\n    var obj: any = nodes[0];\n    // return obj;\n    return Block.fromJson(obj)\n}\n","import { createTheme } from '@material-ui/core/styles';\n\nexport const theme = createTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      light: '#e40c5b',\n      main: '#f53347',\n      dark: '#f53347',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});","import { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { LastBlockNumberQuery, LastBlockQuery } from './block';\nimport { Volume7DayQuery, Volume24HQuery, LiquidityDataQuery } from './dex/dex.query';\nimport { makeStyles } from '@material-ui/core/styles';\nimport dayjs from 'dayjs'\nimport {\n    Paper, List, Box, Grid\n  } from '@material-ui/core';\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend\n  } from \"recharts\";\nimport { theme } from './theme';\nimport { LiquidityPoolData } from './dex';\n\nconst useStyles = makeStyles((theme) => ({\n    displayContent: {\n      display: 'flex',\n      // flexWrap: 'wrap',\n      flexDirection: 'column',\n      '& > *': {\n        margin: theme.spacing(1),\n        width: theme.spacing(80),\n        height: theme.spacing(32),\n      },\n    },\n    paperCard: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    syncTitle: {\n        '& > *': {\n            margin: theme.spacing(0),\n        },\n    },\n    smallTitle: {\n        fontSize: 12,\n    },\n    smallValue: {\n        fontSize: 20,\n    },\n}));\n\nexport function LastBlockSync() {\n    const classes = useStyles();\n\n    const { isLoading, error, data } = LastBlockQuery();\n\n    if (isLoading) return 'Loading...'\n\n    if (error) return 'An error has occurred: ' + error.message\n\n    return (\n        <div className={classes.syncTitle}>\n            <p>Sync At Block <strong>{data.number}</strong></p>\n            <p className={classes.smallTitle}>{new Date(data.timestamp).toUTCString()}</p>\n        </div>\n    )\n}\n\nexport function Volume7DComponent() {\n    const { isLoading, error, data } = Volume7DayQuery();\n\n    if (isLoading) return 'Loading...'\n\n    if (error) return 'An error has occurred: ' + error.message\n\n    return (\n        <div>\n            <p>Sync At Block <strong>{data}</strong></p>\n        </div>\n    )\n}\n\nexport function Volume24HComponent() {\n    const { isLoading, error, data } = Volume24HQuery();\n\n    if (isLoading) return 'Loading...'\n\n    if (error) return 'An error has occurred: ' + error.message\n\n    return (\n        <div>\n            <p>Sync At Block <strong>{data}</strong></p>\n        </div>\n    )\n}\n\nexport function LiquidityDataComponent() {\n    const classes = useStyles();\n\n    const { isLoading, error, data } = LiquidityDataQuery();\n\n    if (isLoading) return 'Loading...';\n\n    if (error) return 'An error has occurred: ' + error.message;\n\n    return (\n        <List className={classes.displayContent}>\n            {data.map((pool,index)=>{\n                return <LiquidityPoolDataCard pool={pool} key={pool.pair}/>\n            })}\n        </List>\n    );\n}\n\nfunction LiquidityPoolDataCard(props) {\n    const pool = props.pool\n    const classes = useStyles();\n\n    const [value, setValue] = useState(undefined);\n    const [date, setDate] = useState(undefined);\n    return (\n        <Paper elevation={0}>\n            <Grid container spacing={3}>\n                <Grid item xs={4}>\n                    <Box p={1} pt={1}>\n                        {pool.pair}\n                    </Box>\n\n                    <Box pl={1} pt={1} className={classes.smallTitle}>\n                        TVL\n                    </Box>\n                    <Box pl={1} pb={1} className={classes.smallValue}>\n                        not ready\n                    </Box>\n                    \n                    <Box pl={1} pt={1} className={classes.smallTitle}>\n                        24h Volume\n                    </Box>\n                    <Box pl={1} pb={1} className={classes.smallValue}>\n                        {pool.data24h.volumeNative.toFixed(3)} KSM\n                    </Box>\n\n                    <Box pl={1} pt={1} className={classes.smallTitle}>\n                        24h Fees\n                    </Box>\n                    <Box pl={1} pb={1} className={classes.smallValue}>\n                    {(pool.data24h.volumeNative*0.003).toFixed(3)} KSM\n                    </Box>\n\n                    <Box pl={1} pt={1} className={classes.smallTitle}>\n                        {date}\n                    </Box>\n                    <Box pl={1} pb={1} className={classes.smallValue}>\n                        {value}\n                    </Box>\n                </Grid>\n                <Grid item xs={8}>\n                    <BarChart\n                        width={444}\n                        height={256}\n                        data={pool.dataByDays}\n                        margin={{\n                            top: 5,\n                            right: 30,\n                            left: 20,\n                            bottom: 5\n                        }}\n                        onMouseLeave={() => {\n                            setValue(undefined);\n                            setDate(undefined);\n                        }}\n                        >\n                        {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n                        {/* <XAxis dataKey=\"date\" /> */}\n                        {/* <YAxis /> */}\n                        <Tooltip \n                            cursor={{ fill: theme.palette.secondary.dark }}\n                            contentStyle={{ display: 'none' }}\n                            formatter={(value, name, props) => {\n                              setValue(props.payload.volumeNative.toFixed(3) + ' KSM');\n                              setDate(dayjs(props.payload.date).format('MMM D, YYYY'));\n                            }}\n                        />\n                        {/* <Legend /> */}\n                        <Bar dataKey=\"volumeNative\" fill={theme.palette.primary.main} />\n                    </BarChart>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}","import { useQuery } from 'react-query';\nimport { lastBlockFromSubquery } from './block.service';\n\nexport function LastBlockNumberQuery() {\n    return useQuery(\"lastBlock\", async () => {\n        return (await lastBlockFromSubquery('https://api.polkawallet.io/karura-subql')).number;\n    });\n}\n\nexport function LastBlockQuery() {\n    return useQuery(\"lastBlock\", async () => {\n        return lastBlockFromSubquery('https://api.polkawallet.io/karura-subql');\n    });\n}","import { useQuery } from 'react-query';\nimport { liquidityData } from '.';\nimport { volume24HQuery, volume7DQuery } from './dex.service';\n\nexport function Volume7DayQuery() {\n    return useQuery(\"volume7d\", async () => {\n        return volume7DQuery();\n    });\n}\n\nexport function Volume24HQuery() {\n    return useQuery(\"volume24h\", async () => {\n        return volume24HQuery();\n    });\n}\n\nexport function LiquidityDataQuery() {\n    return useQuery(\"liquidityData\", async () => {\n        return liquidityData();\n    });\n}","import './App.css';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nimport { LastBlockSync, LiquidityDataComponent } from './app.query';\nimport { theme } from './theme';\n\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport {\n  AppBar, Toolbar, Typography\n} from '@material-ui/core';\n\n// https://github.com/Uniswap/uniswap-v3-info/blob/188b6e666afd7e7c00d20a8731cd0ea76fccc6c9/src/components/BarChart/alt.tsx\n// https://github.com/Uniswap/uniswap-v3-info/blob/188b6e666afd7e7c00d20a8731cd0ea76fccc6c9/src/components/LineChart/alt.tsx\n\nconst queryClient = new QueryClient();\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    flexGrow: 1,\n    position: 'fixed',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  topRight: {\n    alignContent: \"right\",\n  },\n  displayContent: {\n    display: 'flex',\n    // flexWrap: 'wrap',\n    flexDirection: 'column',\n    '& > *': {\n      margin: theme.spacing(1),\n      width: theme.spacing(80),\n      height: theme.spacing(32),\n    },\n  },\n  display: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App-background\">\n          <QueryClientProvider client={queryClient}>\n            <CustomAppBar/>\n\n            <div className=\"App\">\n              {/* <div className={classes.display}> */}\n                <LiquidityDataComponent/>\n              {/* </div> */}\n            </div>\n          </QueryClientProvider>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\nfunction CustomAppBar() {\n  const classes = useStyles();\n\n  return (\n    // <div className={classes.appBar}>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Karura Info\n          </Typography>\n          <Typography variant=\"h6\" className={classes.topRight}>\n            <LastBlockSync/>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    // </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}